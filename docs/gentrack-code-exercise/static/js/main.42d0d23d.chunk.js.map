{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onFileSelected","event","selectedFile","target","files","type","setState","value","onProcessingXmlFile","isProcessingFile","state","file","reader","FileReader","addEventListener","result","loaded","total","percent","console","log","Math","round","readAsDataURL","Container","className","Jumbotron","Form","File","id","label","accept","onChange","this","disabled","custom","Button","variant","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wUA2EeA,G,wDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,eAAiB,SAAAC,GACf,IAAIC,EAAeD,EAAME,OAAOC,MAAM,GACtC,GAA4B,aAAtBF,EAAaG,KAMnB,EAAKC,SAAS,CAAEJ,aAAcD,EAAME,OAAOC,MAAM,SANjD,CACoB,qBAAiBF,EAAaG,KAA9B,uDAElBJ,EAAME,OAAOI,MAAQ,OAbN,EAmBnBC,oBAAsB,SAAAP,GACpB,EAAKK,SAAS,CAAEG,kBAAkB,KAlBlC,EAAKC,MAAQ,CACXD,kBAAkB,EAClBP,aAAc,MAJC,E,2DAuBJS,GACb,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,SAACb,GAChBA,EAAME,OAAOY,UAI9BH,EAAOE,iBAAiB,YAAY,SAACb,GACnC,GAAIA,EAAMe,QAAUf,EAAMgB,MAAO,CAC/B,IAAMC,EAAWjB,EAAMe,OAASf,EAAMgB,MAAS,IAC/CE,QAAQC,IAAR,oBAAyBC,KAAKC,MAAMJ,SAGxCN,EAAOW,cAAcZ,K,+BAIrB,OACE,kBAACa,EAAA,EAAD,CAAWC,UAAU,OACnB,kBAACC,EAAA,EAAD,KACE,sDACA,wFACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,CACEC,GAAG,cACHC,MAAM,iBACNC,OAAO,OACPC,SAAUC,KAAKjC,eACfkC,SAAUD,KAAKvB,MAAMD,iBACrB0B,QAAM,IAER,kBAACC,EAAA,EAAD,CACEC,QAAQ,UACRC,QAASL,KAAKzB,qBAFhB,oC,GAvDM+B,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"gentrack-code-exercise/static/js/main.42d0d23d.chunk.js","sourcesContent":["import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isProcessingFile: false,\n      selectedFile: null\n    };\n  }\n\n  onFileSelected = event => {\n    let selectedFile = event.target.files[0]\n    if (!(selectedFile.type === \"text/xml\")) {\n      let warningMessage = `A file in '${selectedFile.type}' format is select, \n        Expecting: 'text/xml'`;\n      event.target.value = null;\n      return;\n    }\n    this.setState({ selectedFile: event.target.files[0] });\n  }\n\n  onProcessingXmlFile = event => {\n    this.setState({ isProcessingFile: true });\n  };\n\n  processXmlFile(file) {\n    const reader = new FileReader();\n    reader.addEventListener('load', (event) => {\n      const result = event.target.result;\n      // Do something with result\n    });\n\n    reader.addEventListener('progress', (event) => {\n      if (event.loaded && event.total) {\n        const percent = (event.loaded / event.total) * 100;\n        console.log(`Progress: ${Math.round(percent)}`);\n      }\n    });\n    reader.readAsDataURL(file);\n  }\n\n  render() {\n    return (\n      <Container className=\"p-3\">\n        <Jumbotron>\n          <h1>Gentrack Code Exercise</h1>\n          <p>Process selected xml file and output files in csv format.</p>\n          <Form>\n            <Form.File\n              id=\"custom-file\"\n              label=\"input XML file\"\n              accept=\".xml\"\n              onChange={this.onFileSelected}\n              disabled={this.state.isProcessingFile}\n              custom\n            />\n            <Button\n              variant=\"primary\"\n              onClick={this.onProcessingXmlFile}>\n              Process the selected file\n          </Button>\n          </Form>\n        </Jumbotron>\n      </Container>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}